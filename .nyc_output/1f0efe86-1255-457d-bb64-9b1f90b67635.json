{"/home/michael/Documents/Projects/array-helper/register.js":{"path":"/home/michael/Documents/Projects/array-helper/register.js","statementMap":{"0":{"start":{"line":1,"column":15},"end":{"line":1,"column":33}},"1":{"start":{"line":2,"column":21},"end":{"line":2,"column":52}},"2":{"start":{"line":4,"column":0},"end":{"line":8,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"92c1c6675fdbd2ba02b829a721b09bfb725a9f43","contentHash":"c60657afcb7707b66545c9f14939bc51d249493d3ead51df647c275037cc8d37"},"/home/michael/Documents/Projects/array-helper/src/index.ts":{"path":"/home/michael/Documents/Projects/array-helper/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":19}},"2":{"start":{"line":4,"column":0},"end":{"line":341,"column":2}},"3":{"start":{"line":13,"column":23},"end":{"line":13,"column":25}},"4":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"5":{"start":{"line":15,"column":12},"end":{"line":15,"column":45}},"6":{"start":{"line":17,"column":8},"end":{"line":17,"column":22}},"7":{"start":{"line":26,"column":8},"end":{"line":30,"column":11}},"8":{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},"9":{"start":{"line":28,"column":16},"end":{"line":28,"column":26}},"10":{"start":{"line":39,"column":23},"end":{"line":39,"column":31}},"11":{"start":{"line":40,"column":8},"end":{"line":49,"column":11}},"12":{"start":{"line":41,"column":12},"end":{"line":48,"column":13}},"13":{"start":{"line":42,"column":16},"end":{"line":44,"column":19}},"14":{"start":{"line":43,"column":20},"end":{"line":43,"column":36}},"15":{"start":{"line":47,"column":16},"end":{"line":47,"column":33}},"16":{"start":{"line":50,"column":8},"end":{"line":50,"column":22}},"17":{"start":{"line":60,"column":25},"end":{"line":60,"column":60}},"18":{"start":{"line":61,"column":8},"end":{"line":61,"column":74}},"19":{"start":{"line":61,"column":35},"end":{"line":61,"column":71}},"20":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"21":{"start":{"line":73,"column":12},"end":{"line":73,"column":23}},"22":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"23":{"start":{"line":76,"column":12},"end":{"line":76,"column":51}},"24":{"start":{"line":78,"column":25},"end":{"line":78,"column":74}},"25":{"start":{"line":79,"column":8},"end":{"line":79,"column":84}},"26":{"start":{"line":79,"column":35},"end":{"line":79,"column":81}},"27":{"start":{"line":91,"column":23},"end":{"line":91,"column":58}},"28":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"29":{"start":{"line":93,"column":12},"end":{"line":93,"column":51}},"30":{"start":{"line":95,"column":24},"end":{"line":102,"column":9}},"31":{"start":{"line":96,"column":12},"end":{"line":100,"column":13}},"32":{"start":{"line":97,"column":16},"end":{"line":99,"column":17}},"33":{"start":{"line":98,"column":20},"end":{"line":98,"column":32}},"34":{"start":{"line":101,"column":12},"end":{"line":101,"column":25}},"35":{"start":{"line":103,"column":8},"end":{"line":103,"column":65}},"36":{"start":{"line":103,"column":35},"end":{"line":103,"column":62}},"37":{"start":{"line":113,"column":8},"end":{"line":113,"column":30}},"38":{"start":{"line":123,"column":25},"end":{"line":123,"column":33}},"39":{"start":{"line":124,"column":23},"end":{"line":124,"column":42}},"40":{"start":{"line":125,"column":8},"end":{"line":125,"column":56}},"41":{"start":{"line":125,"column":34},"end":{"line":125,"column":54}},"42":{"start":{"line":135,"column":21},"end":{"line":135,"column":29}},"43":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"44":{"start":{"line":137,"column":12},"end":{"line":137,"column":23}},"45":{"start":{"line":139,"column":8},"end":{"line":139,"column":20}},"46":{"start":{"line":149,"column":21},"end":{"line":149,"column":29}},"47":{"start":{"line":150,"column":8},"end":{"line":152,"column":9}},"48":{"start":{"line":151,"column":12},"end":{"line":151,"column":25}},"49":{"start":{"line":153,"column":8},"end":{"line":153,"column":20}},"50":{"start":{"line":166,"column":21},"end":{"line":166,"column":29}},"51":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"52":{"start":{"line":167,"column":21},"end":{"line":167,"column":26}},"53":{"start":{"line":168,"column":12},"end":{"line":168,"column":28}},"54":{"start":{"line":170,"column":8},"end":{"line":170,"column":20}},"55":{"start":{"line":180,"column":8},"end":{"line":185,"column":9}},"56":{"start":{"line":180,"column":21},"end":{"line":180,"column":26}},"57":{"start":{"line":181,"column":23},"end":{"line":181,"column":29}},"58":{"start":{"line":182,"column":12},"end":{"line":184,"column":13}},"59":{"start":{"line":183,"column":16},"end":{"line":183,"column":25}},"60":{"start":{"line":186,"column":8},"end":{"line":186,"column":18}},"61":{"start":{"line":197,"column":8},"end":{"line":202,"column":9}},"62":{"start":{"line":197,"column":21},"end":{"line":197,"column":26}},"63":{"start":{"line":198,"column":23},"end":{"line":198,"column":29}},"64":{"start":{"line":199,"column":12},"end":{"line":201,"column":13}},"65":{"start":{"line":200,"column":16},"end":{"line":200,"column":25}},"66":{"start":{"line":203,"column":8},"end":{"line":203,"column":18}},"67":{"start":{"line":212,"column":8},"end":{"line":212,"column":22}},"68":{"start":{"line":220,"column":8},"end":{"line":220,"column":63}},"69":{"start":{"line":220,"column":41},"end":{"line":220,"column":57}},"70":{"start":{"line":232,"column":8},"end":{"line":232,"column":34}},"71":{"start":{"line":241,"column":8},"end":{"line":243,"column":9}},"72":{"start":{"line":242,"column":12},"end":{"line":242,"column":63}},"73":{"start":{"line":244,"column":8},"end":{"line":244,"column":19}},"74":{"start":{"line":254,"column":8},"end":{"line":254,"column":39}},"75":{"start":{"line":265,"column":8},"end":{"line":267,"column":9}},"76":{"start":{"line":266,"column":12},"end":{"line":266,"column":39}},"77":{"start":{"line":268,"column":8},"end":{"line":272,"column":9}},"78":{"start":{"line":268,"column":21},"end":{"line":268,"column":26}},"79":{"start":{"line":269,"column":12},"end":{"line":271,"column":13}},"80":{"start":{"line":270,"column":16},"end":{"line":270,"column":25}},"81":{"start":{"line":273,"column":8},"end":{"line":273,"column":18}},"82":{"start":{"line":282,"column":21},"end":{"line":282,"column":41}},"83":{"start":{"line":283,"column":8},"end":{"line":283,"column":19}},"84":{"start":{"line":284,"column":8},"end":{"line":284,"column":20}},"85":{"start":{"line":295,"column":8},"end":{"line":306,"column":11}},"86":{"start":{"line":296,"column":29},"end":{"line":296,"column":33}},"87":{"start":{"line":297,"column":12},"end":{"line":304,"column":13}},"88":{"start":{"line":298,"column":16},"end":{"line":303,"column":17}},"89":{"start":{"line":299,"column":20},"end":{"line":302,"column":21}},"90":{"start":{"line":300,"column":24},"end":{"line":300,"column":43}},"91":{"start":{"line":301,"column":24},"end":{"line":301,"column":30}},"92":{"start":{"line":305,"column":12},"end":{"line":305,"column":30}},"93":{"start":{"line":317,"column":8},"end":{"line":330,"column":45}},"94":{"start":{"line":319,"column":33},"end":{"line":319,"column":37}},"95":{"start":{"line":320,"column":16},"end":{"line":327,"column":17}},"96":{"start":{"line":321,"column":20},"end":{"line":326,"column":21}},"97":{"start":{"line":322,"column":24},"end":{"line":325,"column":25}},"98":{"start":{"line":323,"column":28},"end":{"line":323,"column":47}},"99":{"start":{"line":324,"column":28},"end":{"line":324,"column":34}},"100":{"start":{"line":328,"column":16},"end":{"line":328,"column":34}},"101":{"start":{"line":339,"column":8},"end":{"line":339,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":25},"end":{"line":18,"column":5}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":17},"end":{"line":31,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":26},"end":{"line":26,"column":27}},"loc":{"start":{"line":26,"column":34},"end":{"line":30,"column":9}},"line":26},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":25},"end":{"line":51,"column":5}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":40,"column":21},"end":{"line":40,"column":22}},"loc":{"start":{"line":40,"column":30},"end":{"line":49,"column":9}},"line":40},"5":{"name":"(anonymous_5)","decl":{"start":{"line":42,"column":28},"end":{"line":42,"column":29}},"loc":{"start":{"line":42,"column":36},"end":{"line":44,"column":17}},"line":42},"6":{"name":"(anonymous_6)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":31},"end":{"line":62,"column":5}},"line":59},"7":{"name":"(anonymous_7)","decl":{"start":{"line":61,"column":26},"end":{"line":61,"column":27}},"loc":{"start":{"line":61,"column":35},"end":{"line":61,"column":71}},"line":61},"8":{"name":"(anonymous_8)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":43},"end":{"line":80,"column":5}},"line":71},"9":{"name":"(anonymous_9)","decl":{"start":{"line":79,"column":26},"end":{"line":79,"column":27}},"loc":{"start":{"line":79,"column":35},"end":{"line":79,"column":81}},"line":79},"10":{"name":"(anonymous_10)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":47},"end":{"line":104,"column":5}},"line":90},"11":{"name":"(anonymous_11)","decl":{"start":{"line":95,"column":24},"end":{"line":95,"column":25}},"loc":{"start":{"line":95,"column":32},"end":{"line":102,"column":9}},"line":95},"12":{"name":"(anonymous_12)","decl":{"start":{"line":103,"column":26},"end":{"line":103,"column":27}},"loc":{"start":{"line":103,"column":35},"end":{"line":103,"column":62}},"line":103},"13":{"name":"(anonymous_13)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":23},"end":{"line":114,"column":5}},"line":112},"14":{"name":"(anonymous_14)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":28},"end":{"line":126,"column":5}},"line":122},"15":{"name":"(anonymous_15)","decl":{"start":{"line":125,"column":26},"end":{"line":125,"column":27}},"loc":{"start":{"line":125,"column":34},"end":{"line":125,"column":54}},"line":125},"16":{"name":"(anonymous_16)","decl":{"start":{"line":134,"column":4},"end":{"line":134,"column":5}},"loc":{"start":{"line":134,"column":35},"end":{"line":140,"column":5}},"line":134},"17":{"name":"(anonymous_17)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":30},"end":{"line":154,"column":5}},"line":148},"18":{"name":"(anonymous_18)","decl":{"start":{"line":165,"column":4},"end":{"line":165,"column":5}},"loc":{"start":{"line":165,"column":50},"end":{"line":171,"column":5}},"line":165},"19":{"name":"(anonymous_19)","decl":{"start":{"line":179,"column":4},"end":{"line":179,"column":5}},"loc":{"start":{"line":179,"column":41},"end":{"line":187,"column":5}},"line":179},"20":{"name":"(anonymous_20)","decl":{"start":{"line":196,"column":4},"end":{"line":196,"column":5}},"loc":{"start":{"line":196,"column":58},"end":{"line":204,"column":5}},"line":196},"21":{"name":"(anonymous_21)","decl":{"start":{"line":211,"column":4},"end":{"line":211,"column":5}},"loc":{"start":{"line":211,"column":14},"end":{"line":213,"column":5}},"line":211},"22":{"name":"(anonymous_22)","decl":{"start":{"line":219,"column":4},"end":{"line":219,"column":5}},"loc":{"start":{"line":219,"column":17},"end":{"line":221,"column":5}},"line":219},"23":{"name":"(anonymous_23)","decl":{"start":{"line":220,"column":26},"end":{"line":220,"column":27}},"loc":{"start":{"line":220,"column":41},"end":{"line":220,"column":57}},"line":220},"24":{"name":"(anonymous_24)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":21},"end":{"line":233,"column":5}},"line":231},"25":{"name":"(anonymous_25)","decl":{"start":{"line":240,"column":4},"end":{"line":240,"column":5}},"loc":{"start":{"line":240,"column":29},"end":{"line":245,"column":5}},"line":240},"26":{"name":"(anonymous_26)","decl":{"start":{"line":253,"column":4},"end":{"line":253,"column":5}},"loc":{"start":{"line":253,"column":19},"end":{"line":255,"column":5}},"line":253},"27":{"name":"(anonymous_27)","decl":{"start":{"line":264,"column":4},"end":{"line":264,"column":5}},"loc":{"start":{"line":264,"column":35},"end":{"line":274,"column":5}},"line":264},"28":{"name":"(anonymous_28)","decl":{"start":{"line":281,"column":4},"end":{"line":281,"column":5}},"loc":{"start":{"line":281,"column":17},"end":{"line":285,"column":5}},"line":281},"29":{"name":"(anonymous_29)","decl":{"start":{"line":294,"column":4},"end":{"line":294,"column":5}},"loc":{"start":{"line":294,"column":33},"end":{"line":307,"column":5}},"line":294},"30":{"name":"(anonymous_30)","decl":{"start":{"line":295,"column":26},"end":{"line":295,"column":27}},"loc":{"start":{"line":295,"column":34},"end":{"line":306,"column":9}},"line":295},"31":{"name":"(anonymous_31)","decl":{"start":{"line":316,"column":4},"end":{"line":316,"column":5}},"loc":{"start":{"line":316,"column":45},"end":{"line":331,"column":5}},"line":316},"32":{"name":"(anonymous_32)","decl":{"start":{"line":318,"column":25},"end":{"line":318,"column":26}},"loc":{"start":{"line":318,"column":33},"end":{"line":329,"column":13}},"line":318},"33":{"name":"(anonymous_33)","decl":{"start":{"line":338,"column":4},"end":{"line":338,"column":5}},"loc":{"start":{"line":338,"column":20},"end":{"line":340,"column":5}},"line":338}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":15},"end":{"line":12,"column":23}},"type":"default-arg","locations":[{"start":{"line":12,"column":22},"end":{"line":12,"column":23}}],"line":12},"1":{"loc":{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},"type":"if","locations":[{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},{"start":{"line":27,"column":12},"end":{"line":29,"column":13}}],"line":27},"2":{"loc":{"start":{"line":41,"column":12},"end":{"line":48,"column":13}},"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":48,"column":13}},{"start":{"line":41,"column":12},"end":{"line":48,"column":13}}],"line":41},"3":{"loc":{"start":{"line":61,"column":35},"end":{"line":61,"column":71}},"type":"cond-expr","locations":[{"start":{"line":61,"column":59},"end":{"line":61,"column":64}},{"start":{"line":61,"column":67},"end":{"line":61,"column":71}}],"line":61},"4":{"loc":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},{"start":{"line":72,"column":8},"end":{"line":74,"column":9}}],"line":72},"5":{"loc":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},{"start":{"line":75,"column":8},"end":{"line":77,"column":9}}],"line":75},"6":{"loc":{"start":{"line":79,"column":35},"end":{"line":79,"column":81}},"type":"cond-expr","locations":[{"start":{"line":79,"column":69},"end":{"line":79,"column":74}},{"start":{"line":79,"column":77},"end":{"line":79,"column":81}}],"line":79},"7":{"loc":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},{"start":{"line":92,"column":8},"end":{"line":94,"column":9}}],"line":92},"8":{"loc":{"start":{"line":97,"column":16},"end":{"line":99,"column":17}},"type":"if","locations":[{"start":{"line":97,"column":16},"end":{"line":99,"column":17}},{"start":{"line":97,"column":16},"end":{"line":99,"column":17}}],"line":97},"9":{"loc":{"start":{"line":103,"column":35},"end":{"line":103,"column":62}},"type":"cond-expr","locations":[{"start":{"line":103,"column":50},"end":{"line":103,"column":54}},{"start":{"line":103,"column":57},"end":{"line":103,"column":62}}],"line":103},"10":{"loc":{"start":{"line":112,"column":14},"end":{"line":112,"column":21}},"type":"default-arg","locations":[{"start":{"line":112,"column":20},"end":{"line":112,"column":21}}],"line":112},"11":{"loc":{"start":{"line":122,"column":19},"end":{"line":122,"column":26}},"type":"default-arg","locations":[{"start":{"line":122,"column":25},"end":{"line":122,"column":26}}],"line":122},"12":{"loc":{"start":{"line":165,"column":21},"end":{"line":165,"column":30}},"type":"default-arg","locations":[{"start":{"line":165,"column":29},"end":{"line":165,"column":30}}],"line":165},"13":{"loc":{"start":{"line":165,"column":32},"end":{"line":165,"column":48}},"type":"default-arg","locations":[{"start":{"line":165,"column":38},"end":{"line":165,"column":48}}],"line":165},"14":{"loc":{"start":{"line":179,"column":30},"end":{"line":179,"column":39}},"type":"default-arg","locations":[{"start":{"line":179,"column":38},"end":{"line":179,"column":39}}],"line":179},"15":{"loc":{"start":{"line":182,"column":12},"end":{"line":184,"column":13}},"type":"if","locations":[{"start":{"line":182,"column":12},"end":{"line":184,"column":13}},{"start":{"line":182,"column":12},"end":{"line":184,"column":13}}],"line":182},"16":{"loc":{"start":{"line":196,"column":34},"end":{"line":196,"column":56}},"type":"default-arg","locations":[{"start":{"line":196,"column":42},"end":{"line":196,"column":56}}],"line":196},"17":{"loc":{"start":{"line":199,"column":12},"end":{"line":201,"column":13}},"type":"if","locations":[{"start":{"line":199,"column":12},"end":{"line":201,"column":13}},{"start":{"line":199,"column":12},"end":{"line":201,"column":13}}],"line":199},"18":{"loc":{"start":{"line":240,"column":22},"end":{"line":240,"column":27}},"type":"default-arg","locations":[{"start":{"line":240,"column":26},"end":{"line":240,"column":27}}],"line":240},"19":{"loc":{"start":{"line":264,"column":24},"end":{"line":264,"column":33}},"type":"default-arg","locations":[{"start":{"line":264,"column":32},"end":{"line":264,"column":33}}],"line":264},"20":{"loc":{"start":{"line":265,"column":8},"end":{"line":267,"column":9}},"type":"if","locations":[{"start":{"line":265,"column":8},"end":{"line":267,"column":9}},{"start":{"line":265,"column":8},"end":{"line":267,"column":9}}],"line":265},"21":{"loc":{"start":{"line":269,"column":12},"end":{"line":271,"column":13}},"type":"if","locations":[{"start":{"line":269,"column":12},"end":{"line":271,"column":13}},{"start":{"line":269,"column":12},"end":{"line":271,"column":13}}],"line":269},"22":{"loc":{"start":{"line":298,"column":16},"end":{"line":303,"column":17}},"type":"if","locations":[{"start":{"line":298,"column":16},"end":{"line":303,"column":17}},{"start":{"line":298,"column":16},"end":{"line":303,"column":17}}],"line":298},"23":{"loc":{"start":{"line":299,"column":20},"end":{"line":302,"column":21}},"type":"if","locations":[{"start":{"line":299,"column":20},"end":{"line":302,"column":21}},{"start":{"line":299,"column":20},"end":{"line":302,"column":21}}],"line":299},"24":{"loc":{"start":{"line":317,"column":15},"end":{"line":330,"column":44}},"type":"cond-expr","locations":[{"start":{"line":318,"column":14},"end":{"line":329,"column":14}},{"start":{"line":330,"column":14},"end":{"line":330,"column":44}}],"line":317},"25":{"loc":{"start":{"line":321,"column":20},"end":{"line":326,"column":21}},"type":"if","locations":[{"start":{"line":321,"column":20},"end":{"line":326,"column":21}},{"start":{"line":321,"column":20},"end":{"line":326,"column":21}}],"line":321},"26":{"loc":{"start":{"line":322,"column":24},"end":{"line":325,"column":25}},"type":"if","locations":[{"start":{"line":322,"column":24},"end":{"line":325,"column":25}},{"start":{"line":322,"column":24},"end":{"line":325,"column":25}}],"line":322}},"s":{"0":1,"1":1,"2":1,"3":6,"4":6,"5":12,"6":6,"7":3,"8":16,"9":4,"10":3,"11":3,"12":4,"13":1,"14":1,"15":3,"16":3,"17":6,"18":6,"19":9,"20":4,"21":1,"22":3,"23":1,"24":2,"25":2,"26":7,"27":5,"28":5,"29":3,"30":2,"31":7,"32":17,"33":3,"34":4,"35":2,"36":7,"37":4,"38":4,"39":4,"40":4,"41":8,"42":4,"43":4,"44":5,"45":4,"46":3,"47":3,"48":3,"49":3,"50":6,"51":6,"52":6,"53":16,"54":6,"55":4,"56":4,"57":6,"58":6,"59":2,"60":2,"61":3,"62":3,"63":6,"64":6,"65":2,"66":1,"67":3,"68":27,"69":56,"70":4,"71":29,"72":23,"73":6,"74":2,"75":6,"76":2,"77":6,"78":6,"79":11,"80":4,"81":2,"82":4,"83":4,"84":4,"85":7,"86":15,"87":15,"88":20,"89":17,"90":10,"91":10,"92":15,"93":6,"94":7,"95":7,"96":12,"97":10,"98":3,"99":3,"100":7,"101":6},"f":{"0":6,"1":3,"2":16,"3":3,"4":4,"5":1,"6":6,"7":9,"8":4,"9":7,"10":5,"11":7,"12":7,"13":4,"14":4,"15":8,"16":4,"17":3,"18":6,"19":4,"20":3,"21":3,"22":27,"23":56,"24":4,"25":29,"26":2,"27":6,"28":4,"29":7,"30":15,"31":6,"32":7,"33":6},"b":{"0":[2],"1":[4,12],"2":[1,3],"3":[5,4],"4":[1,3],"5":[1,2],"6":[4,3],"7":[3,2],"8":[3,14],"9":[4,3],"10":[3],"11":[2],"12":[1],"13":[4],"14":[0],"15":[2,4],"16":[3],"17":[2,4],"18":[3],"19":[3],"20":[2,4],"21":[4,7],"22":[17,3],"23":[10,7],"24":[5,1],"25":[10,2],"26":[3,7]},"inputSourceMap":{"version":3,"file":"/home/michael/Documents/Projects/array-helper/src/index.ts","sources":["/home/michael/Documents/Projects/array-helper/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Callback } from \"./types/callback\"\n\nexport const _ = {\n  /**\n   * Take an array and divide into a 2D array of chunks of the specified size\n   * If there is any remainder, it will be at the end of the array\n   * @param {Object|Array} arr - input array to chunk\n   * @param {Number} size - chunk size\n   * @returns {Object|Array} output\n   */\n  chunk(arr: any[], size: number = 1) {\n    const output = []\n    while (arr.length > 0) {\n      output.push(arr.splice(0, size))\n    }\n    return output\n  },\n\n  /**\n   * Remove all falsey values from an array\n   * Removes 0, null, false, undefined, \"\", NaN\n   * @param {Object|Array} arr - input array\n   * @returns {Object|array}\n   */\n  compact(arr: any[]) {\n    return arr.filter((el) => {\n      if (el) {\n        return el\n      }\n    })\n  },\n\n  /**\n   * Concatenate a given array and any number of additional elements onto a new array\n   * @param {Object|Array} arr\n   * @param  {...any} args\n   * @returns {Object|Array} output - new array\n   */\n  concat(arr: any[], ...args: any[]) {\n    const output = [...arr]\n    args.forEach((arg) => {\n      if (Array.isArray(arg)) {\n        arg.forEach((el) => {\n          output.push(el)\n        })\n      } else {\n        output.push(arg)\n      }\n    })\n    return output\n  },\n\n  /**\n   * Creates an array of array values not included in any array passed\n   * Non-array types passed for ...arrays are ignored\n   * @param {Object|Array} arr\n   * @param  {...any} arrays\n   * @returns {Object|Array} output\n   */\n  difference(arr: any[], ...arrays: any[][]) {\n    const filtered = arrays.filter(Array.isArray).flat()\n    return arr.filter((el) => (filtered.includes(el) ? false : true))\n  },\n\n  /**\n   * Creates an array of array values not included in the other arrays passed as determined by an iteratee callback\n   * Similar to difference but uses an iteratee to determine comparison\n   * @param {Object|Array} arr\n   * @param {Function} iteratee\n   * @param  {...any} arrays\n   * @returns {Object|Array}\n   */\n  differenceBy(arr, iteratee: Callback, ...arrays: any[][]) {\n    if (!arr.length) {\n      return arr\n    }\n    if (!iteratee) {\n      return this.difference(arr, ...arrays)\n    }\n    const filtered = arrays.filter(Array.isArray).flat().map(iteratee)\n    return arr.filter((el) => (filtered.includes(iteratee(el)) ? false : true))\n  },\n\n  /**\n   * Creates a new array representing the difference between two or more arrays based on a comparson callback\n   * Like _.difference and differenceBy but accepts a function to compare each item in the first array against ...arrays\n   * if comparator callback returns true, the first array item is filtered\n   * @param {Object|Array} arr\n   * @param {Function} comparator - used to compare items in each array\n   * @param  {...any} arrays\n   * @returns {Object|Array}\n   */\n  differenceWith(arr: any[], comparator, ...arrays: any[][]) {\n    let filtered = arrays.filter(Array.isArray).flat()\n    if (!comparator) {\n      return this.difference(arr, ...arrays)\n    }\n    const compare = (el) => {\n      for (let item of filtered) {\n        if (comparator(el, item)) {\n          return true\n        }\n      }\n      return false\n    }\n    return arr.filter((el) => (!compare(el) ? true : false))\n  },\n\n  /**\n   * Drop a specified number of elements from an array starting from index 0\n   * Simple wrapper for Array.slice\n   * @param {Object|Array} arr - array to drop element(s) from\n   * @param {Number} num defaults to 1 - number of elements to drop\n   * @returns {Object|Array}\n   */\n  drop(arr: any[], num: number = 1) {\n    return arr.slice(num)\n  },\n\n  /**\n   * Drop a specified number of elements from the end of an array\n   * Like .drop but drops elements from the end rather than the start\n   * @param {Object|Array} arr - array to drop element(s) from\n   * @param {Number} num\n   * @returns {Object|Array}\n   */\n  dropRight(arr: any[], num: number = 1) {\n    const sliceNum = -1 * num\n    const sliced = arr.slice(sliceNum)\n    return arr.filter((el) => !sliced.includes(el))\n  },\n\n  /**\n   * Drop elements from the end of an array until a predicate callback returns false\n   * Returns a new array\n   * @param {Object|Array} arr - array from which to drop elements\n   * @param {Function} predicate - takes current element of array and returns a truthy or falsey value\n   * @returns {Object|Array}\n   */\n  dropRightWhile(arr: any[], predicate: Callback) {\n    const copy = [...arr]\n    while (predicate(copy[copy.length - 1])) {\n      copy.pop()\n    }\n    return copy\n  },\n\n  /**\n   * Drops elements from the start of the array until predicate returns falsey\n   * Returns a new array\n   * @param {Object|Array} arr - array from which to drop elements\n   * @param {Function} predicate - takes current element of array and returns a truthy or falsey value\n   * @returns {Object|Array}\n   */\n  dropWhile(arr: any[], predicate: Callback) {\n    const copy = [...arr]\n    while (predicate(copy[0])) {\n      copy.shift()\n    }\n    return copy\n  },\n\n  /**\n   * Fill an array with a given value from a specified start to finish\n   * If start is omitted, defaults to 0\n   * If end is omitted, defaults to arr.length\n   * @param {Object|Array} arr\n   * @param {any} value\n   * @param {Number} start\n   * @param {Number} end\n   * @returns {Object|Array}\n   */\n  fill(arr: any[], value, start: number = 0, end: number = arr.length) {\n    const copy = [...arr]\n    for (let i = start; i < end; i++) {\n      copy[i] = value\n    }\n    return copy\n  },\n\n  /**\n   * Return the index of the first element of a given array that predicate turns truthy for\n   * @param {Object|Array} arr\n   * @param {Function} predicate - used to evaluate each item in arr\n   * @param {Number} start - starting index. Defaults to 0\n   * @returns {Number} index\n   */\n  findIndex(arr: any[], predicate: Callback, start: number = 0) {\n    for (let i = start; i < arr.length; i++) {\n      const el = arr[i]\n      if (predicate(el)) {\n        return i\n      }\n    }\n    return -1\n  },\n\n  /**\n   * Find the last index in an array that a callback returns truthy for\n   * Like findIndex but iterates from right to left\n   * @param {Object|Array}} arr\n   * @param {Function} predicate - used to evaluate each item in arr\n   * @param {Number} start - starting index. Defaults to last index in arr\n   * @returns {Number}\n   */\n  findLastIndex(arr: any[], predicate, start: number = arr.length - 1) {\n    for (let i = start; i > -1; i--) {\n      const el = arr[i]\n      if (predicate(el)) {\n        return i\n      }\n    }\n    return -1\n  },\n\n  /**\n   * Returns the first element of an array\n   * Will return undefined when passed an empty array\n   * @param {Object|Array} arr\n   * @returns {any}\n   */\n  head(arr: any[]) {\n    return arr[0]\n  },\n\n  /**\n   * Flatten a multi-dimensional array by a single level\n   * @param {Object|Array} arr - input array to be flattened\n   * @returns {Object|Array}\n   */\n  flatten(arr: any[]) {\n    return arr.reduce((acc, curr) => acc.concat(curr), [])\n  },\n\n  /**\n   * Flattens a multi-dimensional array to a single dimension\n   * Flattens any level of nesting\n   * JavaScript natively provides a very concise way to achieve\n   * Using Array.prototype.flat passing the bigint Infinity\n   * This method is a simple wrapper for JavaScript's native way to do this\n   * @param {Object|Array} arr\n   * @returns {Object|Array}\n   */\n  flattenDeep(arr: any[]) {\n    return arr.flat(Infinity)\n  },\n\n  /**\n   * Recursively flatten an array n levels deep\n   * @param {Object|Array} arr\n   * @param {Number} n - number of levels of depth to flatten. Defaults to 1\n   * @returns {Object|Array}\n   */\n  flattenDepth(arr: any[], n: number = 1) {\n    while (n > 0) {\n      return this.flattenDepth(this.flatten(arr), n - 1)\n    }\n    return arr\n  },\n\n  /**\n   * Convert a list of values composed of an array of arrays to an object\n   * JavaScript natively provides this capability with Object.entries\n   * So this method is a simple wrapper for that native capability\n   * @param {Object|Array} arr\n   * @returns {Object}\n   */\n  fromPairs(arr: any[]) {\n    return Object.fromEntries(arr)\n  },\n\n  /**\n   * Find the index for the first occurrence of an element in an array\n   * If start is negative, it is used as an offset from the end of the array\n   * @param {Object|Array} arr\n   * @param {Any} value\n   * @param {Number} start - index from which to start iterating. Defaults to 0\n   * @returns {Number} index on success, otherwise -1\n   */\n  indexOf(arr: any[], value, start: number = 0): number {\n    if (start < 0) {\n      start = arr.length + start\n    }\n    for (let i = start; i < arr.length; i++) {\n      if (value === arr[i]) {\n        return i\n      }\n    }\n    return -1\n  },\n\n  /**\n   * Returns a new array with all but the last element of arr\n   * Safe for nested arrays as it creates a deep clone of the original\n   * @param {Object|Array} arr\n   * @returns {Object|Array}\n   */\n  initial(arr: any[]) {\n    const copy = this._deepClone(arr)\n    copy.pop()\n    return copy\n  },\n\n  /**\n   * Get the intersection of two or more arrays\n   * The intersection of two or more arrays is the array that results\n   * from all their common elements\n   * @param {Object|Array} arr\n   * @param  {...any} arrays\n   * @returns {Object|Array}\n   */\n  intersection(arr: any[], ...arrays: any[][]) {\n    return arr.filter((el) => {\n      let intersects = true\n      for (let array of arrays) {\n        if (Array.isArray(array)) {\n          if (!array.includes(el)) {\n            intersects = false\n            break\n          }\n        }\n      }\n      return intersects\n    })\n  },\n\n  /**\n   * Get the intersection of two or more arrays as compared by an iteratee\n   * like intersection but each element in each array is compared with criteria set by iteratee\n   * @param {Object|Array} arr\n   * @param {Function} iteratee - function to compare elements in each array. Accepts a single argument\n   * @param  {...any} arrays\n   * @returns {Object|Array}\n   */\n  intersectionBy(arr: any[], iteratee: Callback, ...arrays: any[]) {\n    return iteratee\n      ? arr.filter((el) => {\n          let intersects = true\n          for (let array of arrays) {\n            if (Array.isArray(array)) {\n              if (!array.map(iteratee).includes(iteratee(el))) {\n                intersects = false\n                break\n              }\n            }\n          }\n          return intersects\n        })\n      : this.intersection(arr, arrays)\n  },\n\n  /**\n   * Private method\n   * Utility method to deep clone objects and arrays\n   * @param {Object} obj - object or array\n   * @returns {Object} deep clone\n   */\n  _deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj))\n  },\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"64a11dd1ed61f46f9d6f944347ed8264d93d744b","contentHash":"e6e8a1a6d4a6d97e97e125db93f1a038bfce1e1ef48aca17f7b8cfb96d4a080c"}}